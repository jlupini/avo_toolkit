aeq.ui = ( function ( ui ) {
/**
 * [description]
 * @class
 * @memberof aeq
 * @param  {type} obj [description]
 */
ui.Container = function ( obj ) {
	this.obj = obj;
};

ui.Container.prototype = {
	toString: function () {
		return '[object aeq.ui.Container]';
	},

	extend: aeq.extend,

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @return {type} [description]
	 */
	get: function () {
		return this.obj;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} options [description]
	 */
	set: function ( options ) {
		ui.set( this.obj, options );
	},

	/**
	 * [description]
	 * @method
	 * @private
	 * @memberof aeq.ui.Container
	 * @param  {type} type    [description]
	 * @param  {type} options [description]
	 * @return {type}         [description]
	 */
	_add: function ( type, options ) {
		if ( aeq.isObject( options.arg1 ) && !aeq.isArray( options.arg1 ) ) {
			options = options.arg1;

			// "items" is used by listbox, dropdownlist and treeview
			// if it is defined, it most likely one of those controls
			options.arg1 = options.items || options.text;
		}

		var obj = this.obj.add( type, options.bounds, options.arg1, options.properties );
		ui.set( obj, options );
		return obj;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onClick    [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addButton: function ( arg1, onClick, properties ) {
		return this._add( 'button', {
			arg1: arg1,
			properties: properties,
			onClick: onClick
		});
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onClick    [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addCheckbox: function ( arg1, onClick, properties ) {
		return this._add( 'checkbox', {
			arg1: arg1,
			properties: properties,
			onClick: onClick
		});
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onChange   [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addDropdownList: function ( arg1, onChange, properties ) {
		return this._add( 'dropdownlist', {
			arg1: arg1,
			properties: properties,
			onChange: onChange
		});
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onChange   [description]
	 * @param  {type} onChanging [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addEditText: function ( arg1, onChange, onChanging, properties ) {
		return this._add( 'edittext', {
			arg1: arg1,
			properties: properties,
			onChange: onChange,
			onChanging: onChanging
		});
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} options [description]
	 * @return {type}         [description]
	 */
	addGroup: function ( options ) {
		var group = this.obj.add( 'group' );
		group = new ui.Container( group );
		if ( options ) {
			group.set( options );
		}
		return group;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onClick    [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addIconButton: function ( arg1, onClick, properties ) {
		var options = {
			arg1: arg1,
			onClick: onClick,
			properties: properties
		};

		if ( aeq.isObject( options.arg1 ) && !aeq.isArray( options.arg1 ) &&
			!aeq.isFile( options.arg1 ) && options.arg1.format === undefined ) {
			// Check options.arg1.format to see if it is ScriptUIImage
			options = options.arg1;
			options.arg1 = options.image || undefined;
		}

		var obj = this.obj.add( 'iconbutton', options.bounds, options.arg1, options.properties );
		ui.set( obj, options );
		return obj;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onClick    [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addImage: function ( arg1, onClick, properties ) {
		var options = {
			arg1: arg1,
			onClick: onClick,
			properties: properties
		};

		if ( aeq.isObject( options.arg1 ) && !aeq.isArray( options.arg1 ) &&
			!aeq.isFile( options.arg1 ) && options.arg1.format === undefined ) {
			// Check options.arg1.format to see if it is ScriptUIImage
			options = options.arg1;
			options.arg1 = options.image || undefined;
		}

		var obj = this.obj.add( 'image', options.bounds, options.arg1, options.properties );
		ui.set( obj, options );
		return obj;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1          [description]
	 * @param  {type} onChange      [description]
	 * @param  {type} onDoubleClick [description]
	 * @param  {type} properties    [description]
	 * @return {type}               [description]
	 */
	addListBox: function ( arg1, onChange, onDoubleClick, properties ) {
		var newListBox = this._add( 'listbox', {
			arg1: arg1,
			properties: properties,
			onChange: onChange,
			onDoubleClick: onDoubleClick
		});

		return new ui.ListBox( newListBox );
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addPanel: function ( arg1, properties ) {
		var panel = this._add( 'panel', {
			arg1: arg1,
			properties: properties
		});
		return new ui.Container( panel );
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} value    [description]
	 * @param  {type} maxValue [description]
	 * @return {type}          [description]
	 */
	addProgressbar: function ( value, maxValue ) {
		return this.obj.add( 'progressbar', undefined, value, maxValue );
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} arg1       [description]
	 * @param  {type} onClick    [description]
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addRadioButton: function ( arg1, onClick, properties ) {
		return this._add( 'radiobutton', {
			arg1: arg1,
			properties: properties,
			onClick: onClick
		});
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} value      [description]
	 * @param  {type} maxValue   [description]
	 * @param  {type} onChange   [description]
	 * @param  {type} onChanging [description]
	 * @return {type}            [description]
	 */
	addScrollbar: function ( value, maxValue, onChange, onChanging ) {
		var scrollbar = this.obj.add( 'scrollbar', undefined, value, maxValue );
		scrollbar.onChange = onChange;
		scrollbar.onChanging = onChanging;
		return scrollbar;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} value      [description]
	 * @param  {type} minValue   [description]
	 * @param  {type} maxValue   [description]
	 * @param  {type} onChange   [description]
	 * @param  {type} onChanging [description]
	 * @return {type}            [description]
	 */
	// TODO: Fix number of arguments
	// eslint-disable-next-line
	addSlider: function ( value, minValue, maxValue, onChange, onChanging ) {
		var slider = this.obj.add( 'slider', undefined, value, minValue, maxValue );
		slider.onChange = onChange;
		slider.onChanging = onChanging;
		return slider;
	},

	/**
	 * Adds a StaticText item to this Container
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {String} text     - StaticText text
	 * @param  {type} properties [description]
	 * @return {type}            [description]
	 */
	addStaticText: function ( text, properties ) {
		return this._add( 'statictext', {
			arg1: text,
			properties: properties
		});
	},

	/**
	 * Adds a tab item to this Container
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {String} text      - Tab label text
	 * @return {aeq.ui.Container} - Tab container object
	 */
	addTab: function ( text ) {
		var tab = this.obj.add( 'tab', undefined, text );
		return new ui.Container( tab );
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @return {type} [description]
	 */
	addTabbedPanel: function () {
		var tabbedpanel = this.obj.add( 'tabbedpanel' );
		return new ui.Container( tabbedpanel );
	},

	/**
	 * Adds a TreeView item to this Container
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {String[]} items    - Array of items to add to TreeView
	 * @param  {Function} onChange - onChange event handler
	 * @param  {any} properties    - Properties object
	 * @return {aeq.ui.TreeView}   - aeq.ui.TreeView object
	 */
	addTreeView: function ( items, onChange, properties ) {
		var newTreeView = this._add( 'treeview', {
			arg1: items,
			properties: properties,
			onChange: onChange
		});

		return new ui.TreeView( newTreeView );
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 */
	update: function () {
		this.obj.layout.layout( true );
		this.obj.layout.resize();
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 * @param  {type} obj [description]
	 */
	remove: function ( obj ) {
		if ( obj instanceof ui.Container ) {
			obj = obj.obj;
		}
		this.obj.remove( obj );
	},

	/**
	 * Remove all of the containers children
	 * @memberof aeq.ui.Container
	 * @param {type} obj [description]
	 */
	removeChildren: function ( obj ) {
		if ( obj instanceof ui.Container ) {
			obj = obj.obj;
		}
		for ( var i = obj.children.length - 1; i >= 0; i-- ) {
			obj.remove( obj.children[i] );
		}
	},

	/**
	 * Get all of the containers children
	 * @memberof aeq.ui.Container
	 * @return {type}     [description]
	 */
	getChildren: function () {
		return this.obj.children;
	},

	/**
	 * [description]
	 * @method
	 * @memberof aeq.ui.Container
	 */
	removeAll: function () {
		for ( var i = this.obj.children.length - 1; i >= 0; i-- ) {
			this.obj.remove( this.obj.children[i] );
		}
	}
};

// Aliases, backwards compatible
ui.Container.prototype.addListbox = ui.Container.prototype.addListBox;
ui.Container.prototype.addStatictext = ui.Container.prototype.addStaticText;
ui.Container.prototype.addTreeview = ui.Container.prototype.addTreeView;

( function createControllerSetters() {
	var oneParameters = [ 'enabled', 'helpTip', 'orientation', 'text', 'visible' ],
		twoParameters = [
			'alignChildren',
			'alignment',
			'location',
			'maximumSize',
			'minimumSize',
			'preferredSize',
			'size'
		],
		fourParameters = [ 'bounds', 'margins' ];

	aeq.forEach( oneParameters, function ( type ) {
		ui.Container.prototype[type] = function ( newValue ) {
			if ( newValue === undefined ) {
				return this.obj[type];
			}
			this.obj[type] = newValue;
		};
	});

	function multiParameter( type, numParameters ) {
		return function ( newValue ) {
			if ( newValue === undefined ) {
				return this.obj[type];
			}
			if ( arguments.length === numParameters ) {
				newValue = Array.apply( null, arguments );
			} else {
				newValue = arguments[0];
			}
			this.obj[type] = newValue;
		};
	}

	aeq.forEach( twoParameters, function ( type ) {
		ui.Container.prototype[type] = multiParameter( type, 2 );
	});

	aeq.forEach( fourParameters, function ( type ) {
		ui.Container.prototype[type] = multiParameter( type, 4 );
	});
}() );

return ui;
}( aeq.ui || {}) );

aeq.ui = ( function ( ui ) {
/**
 * ListBox UI class
 * @class
 * @memberof aeq
 * @param  {type} obj [description]
 */
ui.ListBox = function ( obj ) {
	this.obj = obj;
};

ui.ListBox.prototype = {
	toString: function () {
		return '[object aeq.ui.ListBox]';
	},

	extend: aeq.extend,

	/**
	 * Adds a ListItem to this ListBox
	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param  {String} text  - ListItem Text
	 * @param  {Image} image  - ListItem Image
	 * @param  {Number} index - Index to insert ListItem in ListBox
	 * @return {ListItem}     - Created ListITem
	 */
	addItem: function ( text, image, index ) {
		var item = this.obj.add( 'item', text, index );

		if ( !aeq.isNullOrUndefined( image ) ) {
			item.image = image;
		}

		return item;
	},

	/**
	 * Removes a ListItem from this list
	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param  {ListItem} [item] - ListItem to remove; defaults to selection
	 */
	removeItem: function ( item ) {
		item = aeq.setDefault( item, this.obj.selection );

		if ( aeq.isNullOrUndefined( item ) ) {
			return;
		}

		this.obj.remove( item );
	},

	/**
	 * Removes all ListItems from this ListBox
	 * @method
	 * @memberof aeq.ui.ListBox
	 */
	removeAll: function ( ) {
		while ( this.obj.items.length > 0 ) {
			var item = this.obj.items[0];
			this.removeItem( item );
		}
	},

	/**
	 * Gets ancestor of item
	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param  {ListItem} item - Item to get ancestor of
	 * @return {ListItem}      - Ancestor node
	 */
	getAncestor: function ( item ) {
		while ( item.parent.constructor.name !== 'ListBox' ) {
			item = item.parent;
		}

		return item;
	},

	/**
	 * Adds a multi-dimensional row to a list
	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param  {String[]} itemArray - String array for row columns
	 * @return {ListItem}           - Created row
	 */
	addRow: function ( itemArray ) {
		var root = this.getAncestor( this.obj ).parent;

		if ( aeq.isNullOrUndefined( root.properties ) ) {
			return;
		}

		var numColumns = root.properties.numberOfColumns;
		var maxItems = itemArray.length > numColumns ? numColumns : itemArray.length;

		var item = this.addItem( itemArray[0] );

		for ( var i = 0, il = maxItems - 1; i < il; i++ ) {
			item.subItems[i].text = itemArray[i + 1];
		}

		return item;
	},

	/**
	 * Checks whether a selection in a list is contiguous
	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param {ListItem[]} sel - Selection in a list
	 * @returns {Boolean}      - Whether the selection is contiguous
	 */
	contiguous: function ( sel ) {
		if ( !aeq.isArray( sel ) ) {
			return true;
		}

		var firstIndex = sel[0].index;
		var lastIndex = sel[sel.length - 1].index;

		return sel.length === ( lastIndex - firstIndex + 1 );
	},

	/**
	 * Moves selected item(s) up in a list
	 * @method
	 * @memberof aeq.ui.ListBox
	 */
	moveUp: function () {
		var items = this.obj.items;
		var selection = this.obj.selection;
		var i;

		if ( aeq.isNullOrUndefined( selection ) ) {
			return;
		}

		var first = selection.index;
		var last = first + 1;

		if ( !aeq.isNullOrUndefined( this.obj.properties ) && this.obj.properties.multiselect ) {
			selection = selection.sort( function ( a, b ) {
				return a.index - b.index;
			});

			if ( !this.contiguous( selection ) ) {
				return;
			}

			first = selection[0].index;
			last = first + selection.length;
		}

		if ( first === 0 ) {
			return;
		}

		for ( i = first; i < last; i++ ) {
			var thisItem = items[i];
			var lastItem = items[i - 1];

			this.swap( thisItem, lastItem );
		}

		this.obj.selection = null;

		for ( i = first - 1; i < last - 1; i++ ) {
			this.obj.selection = i;
		}
	},

	/**
	 * Moves selected item(s) down in a list
 	 * @method
	 * @memberof aeq.ui.ListBox
	 */
	moveDown: function () {
		var selection = this.obj.selection;
		var items = this.obj.items;
		var i;

		if ( aeq.isNullOrUndefined( selection ) ) {
			return;
		}

		var last = selection.index;
		var first = last;

		if ( !aeq.isNullOrUndefined( this.obj.properties ) && this.obj.properties.multiselect ) {
			selection = selection.sort( function ( a, b ) {
				return a.index - b.index;
			});

			if ( !this.contiguous( selection ) ) {
				return;
			}

			first = selection[0].index;
			last = selection[selection.length - 1].index;
		}

		if ( last === items.length - 1 ) {
			return;
		}

		for ( i = last; i >= first; i-- ) {
			var thisItem = items[i];
			var nextItem = items[i + 1];

			this.swap( thisItem, nextItem );
		}

		this.obj.selection = null;

		for ( i = first + 1; i <= last + 1; i++ ) {
			this.obj.selection = i;
		}
	},

	/**
	 * Moves selected item(s) to the top of a list
 	 * @method
	 * @memberof aeq.ui.ListBox
	 */
	moveToTop: function () {
		var selection = this.obj.selection;
		var items = this.obj.items;
		var i;
		var il;

		if ( aeq.isNullOrUndefined( selection ) ) {
			return;
		}

		var first = selection.index;
		var last = first + 1;

		if ( !aeq.isNullOrUndefined( this.obj.properties ) && this.obj.properties.multiselect ) {
			selection = selection.sort( function ( a, b ) {
				return a.index - b.index;
			});

			if ( !this.contiguous( selection ) ) {
				return;
			}

			first = selection[0].index;
			last = first + selection.length;
		}

		if ( first === 0 ) {
			return;
		}

		for ( var j = 0, jl = first; j < jl; j++ ) {
			for ( i = first; i < last; i++ ) {
				var thisItem = items[i - j];
				var lastItem = items[i - j - 1];

				this.swap( thisItem, lastItem );
			}
		}

		this.obj.selection = null;

		for ( i = 0, il = last - first; i < il; i++ ) {
			this.obj.selection = i;
		}
	},

	/**
	 * Moves selected item(s) to the bottom of a list
 	 * @method
	 * @memberof aeq.ui.ListBox
	 */
	moveToBottom: function () {
		var selection = this.obj.selection;
		var items = this.obj.items;
		var i;
		var il;

		if ( aeq.isNullOrUndefined( selection ) ) {
			return;
		}

		var last = selection.index;
		var first = last;

		if ( !aeq.isNullOrUndefined( this.obj.properties ) && this.obj.properties.multiselect ) {
			selection = selection.sort( function ( a, b ) {
				return a.index - b.index;
			});

			if ( !this.contiguous( selection ) ) {
				return;
			}

			first = selection[0].index;
			last = selection[selection.length - 1].index;
		}

		if ( last === items.length - 1 ) {
			return;
		}

		var spanLength = items.length - last - 1;

		for ( var j = 0, jl = spanLength; j < jl; j++ ) {
			for ( i = last; i >= first; i-- ) {
				var thisItem = items[i + j];
				var nextItem = items[i + j + 1];

				this.swap( thisItem, nextItem );
			}
		}

		this.obj.selection = null;

		for ( i = spanLength + first, il = items.length; i < il; i++ ) {
			this.obj.selection = i;
		}
	},

	/**
	 * Swaps two listItems
 	 * @method
	 * @memberof aeq.ui.ListBox
	 * @param {ListItem} a Item to swap from
	 * @param {ListItem} b Item to swap to
	 */
	swap: function ( a, b ) {
		var temp = a.text;
		a.text = b.text;
		b.text = temp;
	},

	/**
	 * Gets the selection in a list
 	 * @method
	 * @memberof aeq.ui.ListBox
 	 * @returns {ListItem[]} Array of selected items
	 */
	getSelection: function () {
		var selection = this.obj.selection;

		if ( aeq.isNullOrUndefined( selection ) ) {
			return aeq.arrayEx();
		}

		return aeq.arrayEx( selection );
	}

};

// Aliases, backwards compatible
ui.ListBox.prototype.add = ui.ListBox.prototype.addItem;

return ui;
}( aeq.ui || {}) );

/**
 * [description]
 * @namespace aeq.ui
 * @memberof aeq
 */
aeq.ui = ( function ( ui ) {
/**
 * Creates a UI Main Window
 * @method
 * @memberof aeq.ui
 * @param  {Panel}   thisObj                   [description]
 * @param  {string}  title                     Title of the window
 * @param  {Object}  [options]                 Options for the function
 * @param  {boolean} [options.resizeable=true] `true` for resizable window
 * @return {type}                              Created window
 */
ui.createMainWindow = function ( thisObj, title, options ) {
	if ( aeq.isPanel( thisObj ) ) {
		return new ui.Window( thisObj );
	}

	if ( aeq.isString( thisObj ) ) {
		options = title;
		title = thisObj;
	}
	options = aeq.setDefault( options, { resizeable: true });

	var root = new Window( 'palette', title, undefined, options );

	aeq.ui.root = root;

	return new ui.Window( root );
};

/**
 * Creates a UI Window
 * @method
 * @memberof aeq.ui
 * @param  {string}  title                     Title of the window
 * @param  {Object}  [options]                 Options for the function
 * @param  {boolean} [options.resizeable=true] `true` for resizable window
 * @return {type}                              Created window
 */
ui.createWindow = function ( title, options ) {
	options = aeq.setDefault( options, { resizeable: true });
	var newWindow = new Window( 'palette', title, undefined, options );
	return new ui.Window( newWindow );
};

/**
 * Creates a UI Dialog
 * @method
 * @memberof aeq.ui
 * @param  {string}  title                     Title of the dialog
 * @param  {Object}  [options]                 Options for the function
 * @param  {boolean} [options.resizeable=true] `true` for resizable dialog
 * @return {type}                              Created dialog
 */
ui.createDialog = function ( title, options ) {
	options = aeq.setDefault( options, { resizeable: true });
	var newWindow = new Window( 'dialog', title, undefined, options );
	return new ui.Window( newWindow );
};

/**
 * [description]
 * @method
 * @memberof aeq.ui
 * @param  {Function} callback [description]
 */
ui.ready = function ( callback ) {
	callback();
};

/**
 * [description]
 * @method
 * @memberof aeq.ui
 * @param  {type} obj     [description]
 * @param  {type} options [description]
 */
ui.set = function ( obj, options ) {
	for ( var option in options ) {
		if ( options.hasOwnProperty( option ) && option !== 'properties' && option !== 'arg1' ) {
			obj[option] = options[option];
		}
	}
};

return ui;
}( aeq.ui || {}) );

aeq.ui = ( function ( ui ) {
/**
 * TreeView UI class
 * @class
 * @memberof aeq
 * @param  {type} obj [description]
 */
ui.TreeView = function ( obj ) {
	this.obj = obj;
};

ui.TreeView.prototype = ui.ListBox.prototype;

ui.TreeView.prototype.toString = function () {
	return '[object aeq.ui.TreeView]';
};

/**
 * Reveals (expands) an item in a treeview by name
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {String} name - Name of the node to reveal
 */
ui.TreeView.prototype.revealItem = function ( name ) {
	var tree = this.obj;
	var items = this.findItemByName( tree, [], name );

	if ( tree.items.length === 0 || items.length === 0 ) {
		tree.selection = null;
		return;
	}

	var item = items[0];
	var temp = item;

	while ( item.parent.constructor.name !== 'TreeView' ) {
		item.parent.expanded = true;
		item = item.parent;
	}

	tree.selection = temp;
	tree.active = true;
};

/**
 * Adds a node to a UITreeView
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {String} text             Text to add to the node
 * @param {Image} [image]           Image to set as icon for the node
 * @param {Number} [index]          Index to add the node at
 * @param {Boolean} [expanded=true] Whether the node is expanded
 * @returns {aeq.ui.TreeView}       Node as TreeView item
 */
ui.TreeView.prototype.addNode = function ( text, image, index, expanded ) {
	expanded = aeq.setDefault( expanded, true );

	var node = this.obj.add( 'node', text, index );

	if ( !aeq.isNullOrUndefined( image ) ) {
		node.image = image;
	}

	node.expanded = expanded;

	return new ui.TreeView( node );
};

/**
 * Gets ancestor of item
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} item - Node to get ancestor of
 * @returns {_Node}    - Ancestor item
 */
ui.TreeView.prototype.getAncestor = function ( item ) {
	while ( item.parent.constructor.name !== 'TreeView' ) {
		item = item.parent;
	}

	return item;
};

/**
 * Removes ancestor of node
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {ListItem} item - Node to remove ancestor of
 */
ui.TreeView.prototype.removeAncestor = function ( item ) {
	var ancestor = this.getAncestor( item );
	this.removeItem( ancestor );
};

/**
 * Expands a node and all children
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} node - Root node to expand children of
 */
ui.TreeView.prototype.expandNodes = function ( node ) {
	node.expanded = true;

	for ( var i = 0, il = node.items.length; i < il; i++ ) {
		var branch = node.items[i];
		if ( this.isNode( branch ) ) {
			this.expandNodes( branch );
		}
	}
};

/**
 * Collapses a node and all children
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} node - Root node to collapse children of
 */
ui.TreeView.prototype.collapseNodes = function ( node ) {
	node.expanded = false;

	var branches = node.items;

	for ( var i = 0, il = branches.length; i < il; i++ ) {
		var branch = branches[i];
		if ( this.isNode( branch ) ) {
			this.collapseNodes( branch );
		}
	}
};


/**
 * Finds items by name in a node
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} node   - Container node
 * @param {_Node[]} list - Array of found items
 * @param {String} name  - Name to search in
 * @returns {_Node[]}    - Array of found items
 */
ui.TreeView.prototype.findItemByName = function ( node, list, name ) {
	var branches = node.items;

	for ( var i = 0, il = branches.length; i < il; i++ ) {
		var branch = branches[i];
		if ( branch.text !== name ) {
			continue;
		}

		if ( this.isNode( branch ) ) {
			this.findItemByName( branch, list, name );
		}

		list.push( branch );
	};

	return list;
};

/**
 * Creates a new node or branch based on an existing one
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} node Node to copy
 * @param {_Node} nodeCopy New node or branch
 */
ui.TreeView.prototype.copyBranch = function ( node, nodeCopy ) {
	var newNode = nodeCopy.add( node.type, node.text );
	var me = this;

	if ( !this.isNode( node ) ) {
		return;
	}

	var branches = node.items;

	aeq.forEach( branches, function ( branch ) {
		if ( me.isNode( branch ) ) {
			me.copyBranch( branch, newNode );
		} else {
			newNode.add( 'item', node.text );
		}
	});
};

/**
 * Checks whether an branch is a node
 *
 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} branch Branch to check
 * @returns {Boolean} Whether branch is node
 */
ui.TreeView.prototype.isNode = function ( branch ) {
	if ( aeq.isNullOrUndefined( branch ) ) {
		return false;
	}

	return branch.type === 'node';
};

/**
 * Checks whether a branch is an item

 * @method
 * @memberof aeq.ui.TreeView
 * @param {_Node} branch Branch to check
 * @returns {Boolean} Whether branch is item
 */
ui.TreeView.prototype.isItem = function ( branch ) {
	if ( aeq.isNullOrUndefined( branch ) ) {
		return false;
	}

	return branch.type === 'item';
};

/**
 * Moves selected item(s) up in a treeview
 *
 * @method
 * @memberof aeq.ui.TreeView
 */
ui.TreeView.prototype.moveUp = function () {
	var tree = this.obj;

	if ( tree.selection === null ) return;

	if ( tree.selection.index > 0 ) {
		var sel = tree.selection;
		var prev = sel.parent.items[sel.index - 1];

		if ( this.isItem( sel ) && this.isItem( prev ) ) {
			this.swap( sel, prev );
			tree.selection = prev;
			return;
		}

		if ( this.isNode( sel ) && this.isItem( prev ) ) {
			sel.parent.add( 'item', prev.text, sel.index + 1 );
			this.removeItem( sel );
			return;
		}

		if ( this.isItem( sel ) && this.isNode( prev ) ) {
			tree.selection = sel.parent.add( 'item', sel.text, sel.index - 1 );
			this.removeItem( sel );
			return;
		}

		var target = sel.parent.add( 'node', sel.text, sel.index - 1 );

		for ( var i = 0, il = target.length; i < il; i++ ) {
			this.copyBranch( sel.items[i], target );
		}

		tree.selection = target;
		this.removeItem( sel );
	}
};

/**
 * Moves selected item(s) down in a treeview
 *
 * @method
 * @memberof aeq.ui.TreeView
 */
ui.TreeView.prototype.moveDown = function () {
	var tree = this.obj;

	if ( tree.selection === null ) return;

	if ( tree.selection.index < tree.items.length - 1 ) {
		var sel = tree.selection;
		var next = sel.parent.items[sel.index + 1];

		if ( this.isItem( sel ) && this.isItem( next ) ) {
			this.swap( sel, next );
			tree.selection = next;
			return;
		}

		if ( this.isNode( sel ) && this.isItem( next ) ) {
			sel.parent.add( 'item', next.text, sel.index - 1 );
			this.removeItem( next );
			return;
		}

		if ( this.isItem( sel ) && this.isNode( next ) ) {
			tree.selection = sel.parent.add( 'item', sel.text, sel.index + 1 );
			this.removeItem( sel );
			return;
		}

		var target = sel.parent.add( 'node', sel.text, sel.index + 2 );

		for ( var i = 0, il = target.length; i < il; i++ ) {
			this.copyBranch( sel.items[i], target );
		};

		tree.selection = target;
		this.removeItem( sel );
	}
};

return ui;
}( aeq.ui || {}) );

aeq.ui = ( function ( ui ) {
/**
	 * [description]
	 * @class
	 * @memberof aeq
	 * @param  {type} obj [description]
	 */
ui.Window = function ( obj ) {
	this.obj = obj;
};

ui.Window.prototype = ui.Container.prototype;

/**
 * [description]
 * @method
 * @memberof aeq.ui.Window
 * @return {type} [description]
 */
ui.Window.prototype.show = function () {
	this.layout();
	if ( aeq.isWindow( this.obj ) ) {
		return this.obj.show();
	}
};

/**
 * [description]
 * @method
 * @memberof aeq.ui.Window
 */
ui.Window.prototype.hide = function () {
	if ( aeq.isWindow( this.obj ) ) {
		this.obj.hide();
	}
};

/**
 * [description]
 * @method
 * @memberof aeq.ui.Window
 * @param  {type} value [description]
 */
ui.Window.prototype.close = function ( value ) {
	if ( aeq.isWindow( this.obj ) ) {
		this.obj.close( value );
	}
};

/**
 * [description]
 * @method
 * @memberof aeq.ui.Window
 */
ui.Window.prototype.layout = function () {
	this.obj.layout.layout( true );
	this.obj.layout.resize();
	this.obj.onResizing = this.obj.onResize = function () {
		this.layout.resize();
	};
};

return ui;
}( aeq.ui || {}) );
