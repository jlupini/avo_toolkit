/*
 * CSS like attribute parsing.
 *
 * Parses strings like `comp[index=165468 selected]:not(name="myComp") layer[color=0xFFFFFF]:first():not(selected)` to objects.
 */

{
  function mergeProps(array){
    var merged = {};

    for (var i = 0; i < array.length; i++) {
      var pair = array[i]
      for (var key in pair) {
        if (pair.hasOwnProperty(key)) {
            merged[key] = pair[key]
        }
      }
    }

    return merged;
  }
}

Start
  = Selectors

PropertiesBrackets
  = '[' props:Property* ']' { return mergeProps(props) }

PropertiesParentheses
  = '(' props:Property* ')' { return mergeProps(props) }

Property
  = ValuePair
  / ValueSingle

ValueSingle
  = name:[a-zA-Z]+ _ { var o = {}; var key = name.join(''); o[key] = { type: 'Bool', value: true }; return o; }

ValuePair
  = name:[a-zA-Z]+ "=" value:Value _? { var o = {}; var key = name.join(''); o[key] = value; return o; }

Selector
  = type:[a-zA-Z]+ props:PropertiesBrackets? pseudo:Pseudo* _? {
    return { type: type.join('').toLowerCase(), props: props, pseudo: pseudo }
  }

Selectors
  = Selector+

Pseudo
  = ":" type:[a-zA-Z]* props:PropertiesParentheses? { return { type: type.join('').toLowerCase(), props: props } }

Value
  = BooleanLiteral
  / NumericLiteral
  / StringLiteral
  / ArrayLiteral
  / RegularExpressionLiteral

NumericLiteral
  = literal:HexIntegerLiteral !(DecimalDigit) { return literal; }
  / literal:DecimalLiteral { return literal; }

BooleanLiteral
  = TrueToken  { return { type: 'Bool', value: true } }
  / FalseToken { return { type: 'Bool', value: false } }

DecimalIntegerLiteral
  = "0"
  / NonZeroDigit DecimalDigit*

DecimalDigit
  = [0-9]

NonZeroDigit
  = [1-9]

DecimalLiteral
  = DecimalIntegerLiteral "." DecimalDigit* { return { type: 'Number', value: parseFloat(text()) } }
  / "." DecimalDigit+ { return { type: 'Number', value: parseFloat(text()) } }
  / DecimalIntegerLiteral { return { type: 'Integer', value: parseFloat(text()) } }

HexIntegerLiteral
  = "0x"i digits:$HexDigit+ { return { type: "Hex", value: parseInt(digits, 16) } }

HexDigit
  = [0-9a-f]i

StringLiteral
  = '"' chars:DoubleStringCharacter* '"' {
      return { type: "String", value: chars.join("") };
    }
  / "'" chars:SingleStringCharacter* "'" {
      return { type: "String", value: chars.join("") };
    }

DoubleStringCharacter
  = !('"' / "\\" / LineTerminator) . { return text(); }
  / "\\" sequence:EscapeSequence { return sequence; }
  / LineContinuation

SingleStringCharacter
  = !("'" / "\\" / LineTerminator) . { return text(); }
  / "\\" sequence:EscapeSequence { return sequence; }
  / LineContinuation

LineContinuation
  = "\\" LineTerminatorSequence { return ""; }

EscapeSequence
  = CharacterEscapeSequence
  / "0" !DecimalDigit { return "\0"; }
  / HexEscapeSequence
  / UnicodeEscapeSequence

CharacterEscapeSequence
  = SingleEscapeCharacter
  / NonEscapeCharacter

SingleEscapeCharacter
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\v";   }

NonEscapeCharacter
  = !(EscapeCharacter / LineTerminator) . { return text(); }

EscapeCharacter
  = SingleEscapeCharacter
  / DecimalDigit
  / "x"
  / "u"

HexEscapeSequence
  = "x" digits:$(HexDigit HexDigit) {
      return String.fromCharCode(parseInt(digits, 16));
    }

UnicodeEscapeSequence
  = "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
      return String.fromCharCode(parseInt(digits, 16));
    }

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

ArrayLiteral
  = "[" _ head:ArrayValue* _ tail:Value _ "]" {
    head.push(tail); return { type: "Array", value: head };
  }

ArrayValue
  = value:Value _ "," _ { return value }

TrueToken = "true" _?
FalseToken = "false" _?

_ "whitespace"
  = [ \t\n\r]*

/* RegularExpressionLiteral */

RegularExpressionLiteral "regular expression"
= "/" body:RegularExpressionBody "/" flags:RegularExpressionFlags {
    return {
      type:  "RegExp",
      body:  body,
      flags: flags,
      value: new RegExp(body, flags)
    };
  }

RegularExpressionBody
= char_:RegularExpressionFirstChar chars:RegularExpressionChars {
    return char_ + chars;
  }

RegularExpressionChars
= chars:RegularExpressionChar* { return chars.join(""); }

RegularExpressionFirstChar
= ![*\\/[] char_:RegularExpressionNonTerminator { return char_; }
/ RegularExpressionBackslashSequence
/ RegularExpressionClass

RegularExpressionChar
= ![\\/[] char_:RegularExpressionNonTerminator { return char_; }
/ RegularExpressionBackslashSequence
/ RegularExpressionClass

/*
* This rule contains an error in the specification: "NonTerminator" instead of
* "RegularExpressionNonTerminator".
*/
RegularExpressionBackslashSequence
= "\\" char_:RegularExpressionNonTerminator { return "\\" + char_; }

RegularExpressionNonTerminator
= !LineTerminator char_:SourceCharacter { return char_; }

RegularExpressionClass
= "[" chars:RegularExpressionClassChars "]" { return "[" + chars + "]"; }

RegularExpressionClassChars
= chars:RegularExpressionClassChar* { return chars.join(""); }

RegularExpressionClassChar
= ![\]\\] char_:RegularExpressionNonTerminator { return char_; }
/ RegularExpressionBackslashSequence

RegularExpressionFlags
= parts:[gimuy]* { return parts.join(""); }

SourceCharacter
= .
